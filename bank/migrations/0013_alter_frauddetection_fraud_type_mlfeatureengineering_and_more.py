# Generated by Django 5.2.1 on 2025-07-31 21:26

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bank', '0012_bulktransfer_bulktransferitem_devicefingerprint_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='frauddetection',
            name='fraud_type',
            field=models.CharField(choices=[('velocity_check', 'Velocity Check'), ('geographic_anomaly', 'Geographic Anomaly'), ('behavioral_anomaly', 'Behavioral Anomaly'), ('device_mismatch', 'Device Mismatch'), ('ip_anomaly', 'IP Anomaly'), ('amount_anomaly', 'Amount Anomaly'), ('recipient_anomaly', 'Recipient Anomaly'), ('time_pattern_anomaly', 'Time Pattern Anomaly'), ('transaction_sequence_anomaly', 'Transaction Sequence Anomaly'), ('beneficiary_network_anomaly', 'Beneficiary Network Anomaly'), ('spending_pattern_deviation', 'Spending Pattern Deviation'), ('account_takeover_pattern', 'Account Takeover Pattern'), ('multi_device_anomaly', 'Multi-Device Usage Anomaly'), ('cross_border_pattern', 'Cross-Border Pattern'), ('recurring_pattern_break', 'Recurring Pattern Break'), ('velocity_pattern_change', 'Velocity Pattern Change'), ('device_fingerprint_anomaly', 'Device Fingerprint Anomaly'), ('location_pattern_break', 'Location Pattern Break'), ('transaction_amount_pattern', 'Transaction Amount Pattern'), ('new_beneficiary_risk', 'New Beneficiary Risk Pattern'), ('mule_account_pattern', 'Mule Account Pattern')], max_length=50),
        ),
        migrations.CreateModel(
            name='MLFeatureEngineering',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feature_name', models.CharField(max_length=100, unique=True)),
                ('feature_type', models.CharField(choices=[('numerical', 'Numerical'), ('categorical', 'Categorical'), ('temporal', 'Temporal'), ('text', 'Text'), ('composite', 'Composite')], max_length=50)),
                ('description', models.TextField()),
                ('computation_logic', models.JSONField(help_text='Logic for feature computation')),
                ('dependencies', models.JSONField(help_text='Required input features')),
                ('validation_rules', models.JSONField(help_text='Feature validation rules')),
                ('mean_value', models.FloatField(blank=True, null=True)),
                ('std_dev', models.FloatField(blank=True, null=True)),
                ('min_value', models.FloatField(blank=True, null=True)),
                ('max_value', models.FloatField(blank=True, null=True)),
                ('unique_values', models.JSONField(blank=True, null=True)),
                ('importance_score', models.FloatField(help_text='Feature importance in model', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('version', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bank_ml_feature_engineering',
                'indexes': [models.Index(fields=['feature_type'], name='bank_ml_fea_feature_4ee935_idx'), models.Index(fields=['importance_score'], name='bank_ml_fea_importa_cf4de3_idx')],
            },
        ),
        migrations.CreateModel(
            name='MLModelTraining',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('classification', 'Classification'), ('regression', 'Regression'), ('clustering', 'Clustering'), ('anomaly_detection', 'Anomaly Detection')], max_length=50)),
                ('training_data_size', models.PositiveIntegerField()),
                ('features_used', models.JSONField()),
                ('training_start', models.DateTimeField()),
                ('training_end', models.DateTimeField(blank=True, null=True)),
                ('hyperparameters', models.JSONField()),
                ('model_architecture', models.JSONField()),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('auc_roc', models.FloatField(blank=True, null=True)),
                ('cv_scores', models.JSONField(blank=True, null=True)),
                ('validation_metrics', models.JSONField(blank=True, null=True)),
                ('model_file_path', models.CharField(max_length=255)),
                ('feature_importance', models.JSONField()),
                ('version', models.CharField(max_length=50)),
                ('is_production', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'bank_ml_model_training',
                'indexes': [models.Index(fields=['model_name', 'version'], name='bank_ml_mod_model_n_c2cbe8_idx'), models.Index(fields=['is_production'], name='bank_ml_mod_is_prod_b89839_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnomalyDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('isolation_forest_score', models.FloatField(help_text='Isolation Forest anomaly score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('local_outlier_score', models.FloatField(help_text='Local Outlier Factor score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('autoencoder_score', models.FloatField(help_text='Autoencoder reconstruction error score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('temporal_features', models.JSONField(help_text='Time-based contextual features')),
                ('behavioral_features', models.JSONField(help_text='User behavior features')),
                ('transaction_features', models.JSONField(help_text='Transaction-specific features')),
                ('anomaly_type', models.CharField(choices=[('point_anomaly', 'Point Anomaly'), ('contextual_anomaly', 'Contextual Anomaly'), ('collective_anomaly', 'Collective Anomaly')], max_length=50)),
                ('confidence', models.FloatField(help_text='Detection confidence score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('threshold_config', models.JSONField(help_text='Dynamic threshold configuration')),
                ('is_anomaly', models.BooleanField(default=False)),
                ('requires_investigation', models.BooleanField(default=False)),
                ('investigation_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('resolved', 'Resolved')], default='pending', max_length=20)),
                ('investigation_notes', models.TextField(blank=True)),
                ('actions_taken', models.JSONField(default=list, help_text='Actions taken in response')),
                ('resolution', models.CharField(blank=True, choices=[('true_positive', 'True Positive'), ('false_positive', 'False Positive'), ('inconclusive', 'Inconclusive')], max_length=50, null=True)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='anomaly_detections', to='bank.banktransfer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anomaly_detections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bank_anomaly_detection',
                'indexes': [models.Index(fields=['user', 'is_anomaly'], name='bank_anomal_user_id_036c29_idx'), models.Index(fields=['investigation_status'], name='bank_anomal_investi_74fc58_idx'), models.Index(fields=['detected_at'], name='bank_anomal_detecte_90d36f_idx')],
            },
        ),
        migrations.CreateModel(
            name='BehavioralAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active_hours', models.JSONField(help_text='Typical hours of activity')),
                ('active_days', models.JSONField(help_text='Typical days of activity')),
                ('session_patterns', models.JSONField(help_text='Session duration and frequency patterns')),
                ('amount_patterns', models.JSONField(help_text='Amount distribution patterns')),
                ('frequency_patterns', models.JSONField(help_text='Transaction frequency patterns')),
                ('recipient_patterns', models.JSONField(help_text='Recipient interaction patterns')),
                ('location_clusters', models.JSONField(help_text='Common location clusters')),
                ('travel_patterns', models.JSONField(help_text='User movement patterns')),
                ('typical_radius', models.FloatField(help_text='Typical activity radius in km')),
                ('device_fingerprints', models.JSONField(help_text='Known device fingerprints')),
                ('device_usage_patterns', models.JSONField(help_text='Device usage patterns')),
                ('regularity_score', models.FloatField(help_text='Score indicating behavior regularity', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('risk_appetite', models.FloatField(help_text='Score indicating risk tolerance', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('trust_score', models.FloatField(help_text='Overall trust score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('last_analyzed', models.DateTimeField(auto_now=True)),
                ('data_points', models.PositiveIntegerField(help_text='Number of data points analyzed')),
                ('confidence_level', models.FloatField(help_text='Confidence in analysis', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='behavioral_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bank_behavioral_analysis',
                'indexes': [models.Index(fields=['user', 'trust_score'], name='bank_behavi_user_id_1bc86a_idx'), models.Index(fields=['last_analyzed'], name='bank_behavi_last_an_2c996f_idx')],
            },
        ),
        migrations.CreateModel(
            name='MLModelRegistry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=100)),
                ('model_version', models.CharField(max_length=50)),
                ('model_type', models.CharField(choices=[('fraud_detection', 'Fraud Detection'), ('risk_scoring', 'Risk Scoring'), ('anomaly_detection', 'Anomaly Detection'), ('behavioral_analysis', 'Behavioral Analysis'), ('transaction_monitoring', 'Transaction Monitoring')], max_length=50)),
                ('framework', models.CharField(help_text='ML framework used', max_length=50)),
                ('input_features', models.JSONField(help_text='Required input features')),
                ('output_format', models.JSONField(help_text='Model output specification')),
                ('preprocessing_steps', models.JSONField(help_text='Data preprocessing pipeline')),
                ('deployment_environment', models.CharField(choices=[('development', 'Development'), ('staging', 'Staging'), ('production', 'Production')], max_length=50)),
                ('deployed_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('performance_metrics', models.JSONField(help_text='Model performance metrics')),
                ('inference_latency', models.FloatField(help_text='Average inference time in ms')),
                ('error_rate', models.FloatField(help_text='Model error rate')),
                ('health_status', models.CharField(choices=[('healthy', 'Healthy'), ('degraded', 'Degraded'), ('failed', 'Failed')], max_length=20)),
                ('last_monitoring_check', models.DateTimeField(auto_now=True)),
                ('monitoring_metrics', models.JSONField(help_text='Real-time monitoring metrics')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deployed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='model_deployments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bank_ml_model_registry',
                'indexes': [models.Index(fields=['model_name', 'model_version'], name='bank_ml_mod_model_n_aebd0d_idx'), models.Index(fields=['deployment_environment', 'is_active'], name='bank_ml_mod_deploym_c728ed_idx'), models.Index(fields=['health_status'], name='bank_ml_mod_health__771b87_idx')],
                'unique_together': {('model_name', 'model_version')},
            },
        ),
        migrations.CreateModel(
            name='RealTimeMonitoring',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('velocity_score', models.FloatField(help_text='Transaction velocity risk score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('amount_anomaly_score', models.FloatField(help_text='Transaction amount anomaly score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('pattern_deviation_score', models.FloatField(help_text='Pattern deviation risk score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('location_risk_score', models.FloatField(help_text='Location-based risk score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('device_risk_score', models.FloatField(help_text='Device-based risk score', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('user_patterns', models.JSONField(help_text='User behavioral patterns')),
                ('transaction_patterns', models.JSONField(help_text='Transaction patterns')),
                ('device_patterns', models.JSONField(help_text='Device usage patterns')),
                ('model_predictions', models.JSONField(help_text='ML model prediction outputs')),
                ('confidence_scores', models.JSONField(help_text='Confidence scores for predictions')),
                ('feature_contributions', models.JSONField(help_text='Feature importance for decisions')),
                ('requires_review', models.BooleanField(default=False)),
                ('alert_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=20)),
                ('alerts_generated', models.JSONField(default=list, help_text='List of alerts generated')),
                ('monitored_at', models.DateTimeField(auto_now_add=True)),
                ('processing_time', models.FloatField(help_text='Time taken for monitoring in milliseconds')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_data', to='bank.banktransfer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bank_realtime_monitoring',
                'indexes': [models.Index(fields=['user', 'monitored_at'], name='bank_realti_user_id_39b018_idx'), models.Index(fields=['alert_level'], name='bank_realti_alert_l_93ff37_idx'), models.Index(fields=['requires_review'], name='bank_realti_require_e65789_idx')],
            },
        ),
    ]
