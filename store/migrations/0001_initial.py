# Generated by Django 5.2.1 on 2025-07-20 18:56

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Store name (letters, numbers, spaces, hyphens, underscores, ampersands, periods only)', max_length=255, validators=[django.core.validators.RegexValidator(message='Store name can only contain letters, numbers, spaces, hyphens, underscores, ampersands, and periods.', regex='^[a-zA-Z0-9\\s\\-_&.]+$')])),
                ('description', models.TextField(blank=True, help_text='Store description (max 2000 characters)', max_length=2000)),
                ('location', models.CharField(help_text='Store location or address', max_length=255)),
                ('logo', models.URLField(blank=True, help_text='URL to store logo image', max_length=500, validators=[django.core.validators.URLValidator()])),
                ('cover_image', models.URLField(blank=True, help_text='URL to store cover image', max_length=500, null=True, validators=[django.core.validators.URLValidator()])),
                ('contact_email', models.EmailField(help_text='Primary contact email for the store', max_length=254)),
                ('phone_number', models.CharField(help_text='Contact phone number', max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number', regex='^[\\+]?[1-9][\\d]{0,15}$')])),
                ('website_url', models.URLField(blank=True, help_text='Store website URL', max_length=500, null=True, validators=[django.core.validators.URLValidator()])),
                ('facebook_url', models.URLField(blank=True, help_text='Facebook page URL', max_length=500, null=True, validators=[django.core.validators.URLValidator()])),
                ('instagram_url', models.URLField(blank=True, help_text='Instagram profile URL', max_length=500, null=True, validators=[django.core.validators.URLValidator()])),
                ('twitter_url', models.URLField(blank=True, help_text='Twitter profile URL', max_length=500, null=True, validators=[django.core.validators.URLValidator()])),
                ('whatsapp_url', models.URLField(blank=True, help_text='Whatsapp profile URL', max_length=500, null=True, validators=[django.core.validators.URLValidator()])),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Review'), ('active', 'Active'), ('suspended', 'Suspended'), ('closed', 'Closed')], default='active', help_text='Current status of the store', max_length=20)),
                ('is_verified', models.BooleanField(default=True, help_text='Whether the store has been verified by admin')),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Commission rate percentage (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_stores', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Store',
                'verbose_name_plural': 'Stores',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoreAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_views', models.PositiveIntegerField(default=0)),
                ('unique_visitors', models.PositiveIntegerField(default=0)),
                ('page_views', models.PositiveIntegerField(default=0)),
                ('total_sales', models.PositiveIntegerField(default=0)),
                ('revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_orders', models.PositiveIntegerField(default=0)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('conversion_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('bounce_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_products', models.PositiveIntegerField(default=0)),
                ('active_products', models.PositiveIntegerField(default=0)),
                ('top_selling_products', models.JSONField(default=list)),
                ('total_customers', models.PositiveIntegerField(default=0)),
                ('repeat_customers', models.PositiveIntegerField(default=0)),
                ('customer_retention_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('calculated_at', models.DateTimeField(blank=True, null=True)),
                ('store', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='store.store')),
            ],
            options={
                'verbose_name': 'Store Analytics',
                'verbose_name_plural': 'Store Analytics',
            },
        ),
        migrations.CreateModel(
            name='StoreStaff',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('manager', 'Manager'), ('staff', 'Staff'), ('admin', 'Administrator')], default='staff', help_text='Role of the staff member in the store', max_length=50)),
                ('can_manage_products', models.BooleanField(default=False, help_text='Can manage store products')),
                ('can_manage_orders', models.BooleanField(default=False, help_text='Can manage store orders')),
                ('can_manage_staff', models.BooleanField(default=False, help_text='Can manage other staff members')),
                ('can_view_analytics', models.BooleanField(default=False, help_text='Can view store analytics')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the staff member is active')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staff_members', to='store.store')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Store Staff',
                'verbose_name_plural': 'Store Staff',
            },
        ),
        migrations.CreateModel(
            name='CustomerLifetimeValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('first_purchase_date', models.DateTimeField(blank=True, null=True)),
                ('last_purchase_date', models.DateTimeField(blank=True, null=True)),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('purchase_frequency', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_orders', models.PositiveIntegerField(default=0)),
                ('customer_since', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_lifetime_value', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer Lifetime Value',
                'verbose_name_plural': 'Customer Lifetime Values',
                'indexes': [models.Index(fields=['total_spent'], name='store_custo_total_s_73f908_idx'), models.Index(fields=['last_purchase_date'], name='store_custo_last_pu_09fd9d_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['status'], name='store_store_status_565347_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['owner'], name='store_store_owner_i_d4e5f2_idx'),
        ),
        migrations.AddIndex(
            model_name='store',
            index=models.Index(fields=['created_at'], name='store_store_created_99b644_idx'),
        ),
        migrations.AddIndex(
            model_name='storeanalytics',
            index=models.Index(fields=['revenue'], name='store_store_revenue_6f1958_idx'),
        ),
        migrations.AddIndex(
            model_name='storeanalytics',
            index=models.Index(fields=['total_sales'], name='store_store_total_s_428724_idx'),
        ),
        migrations.AddIndex(
            model_name='storeanalytics',
            index=models.Index(fields=['conversion_rate'], name='store_store_convers_3a2c84_idx'),
        ),
        migrations.AddIndex(
            model_name='storestaff',
            index=models.Index(fields=['store', 'role'], name='store_store_store_i_cbb8e7_idx'),
        ),
        migrations.AddIndex(
            model_name='storestaff',
            index=models.Index(fields=['user', 'role'], name='store_store_user_id_99c72e_idx'),
        ),
        migrations.AddIndex(
            model_name='storestaff',
            index=models.Index(fields=['role'], name='store_store_role_29598c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storestaff',
            unique_together={('store', 'user')},
        ),
    ]
