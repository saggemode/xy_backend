# Generated by Django 5.2.1 on 2025-07-20 18:56

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0001_initial'),
        ('store', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the payment', primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(db_index=True, help_text='External payment processor transaction ID', max_length=100, unique=True, verbose_name='Transaction ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Amount')),
                ('currency', models.CharField(default='USD', help_text='Payment currency code', max_length=3, verbose_name='Currency')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('authorized', 'Authorized'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('cancelled', 'Cancelled')], db_index=True, default='pending', help_text='Current payment status', max_length=20, verbose_name='Status')),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('paypal', 'PayPal'), ('bank_transfer', 'Bank Transfer'), ('cash_on_delivery', 'Cash on Delivery'), ('digital_wallet', 'Digital Wallet'), ('cryptocurrency', 'Cryptocurrency')], help_text='Method used for payment', max_length=20, verbose_name='Payment Method')),
                ('payment_details', models.JSONField(default=dict, help_text='Additional payment information from processor', verbose_name='Payment Details')),
                ('gateway_response', models.JSONField(default=dict, help_text='Response from payment gateway', verbose_name='Gateway Response')),
                ('error_message', models.TextField(blank=True, help_text='Error message if payment failed', verbose_name='Error Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the payment was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the payment was last updated', verbose_name='Updated At')),
                ('processed_at', models.DateTimeField(blank=True, help_text='Timestamp when the payment was processed', null=True, verbose_name='Processed At')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the order', primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(blank=True, db_index=True, help_text='Human-readable order identifier', max_length=50, null=True, unique=True, verbose_name='Order Number')),
                ('customer_id', models.CharField(help_text='External customer identifier', max_length=255, unique=True, verbose_name='Customer ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('processing', 'Processing'), ('shipped', 'Shipped'), ('out_for_delivery', 'Out for Delivery'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('returned', 'Returned'), ('partially_refunded', 'Partially Refunded')], db_index=True, default='pending', help_text='Current status of the order', max_length=20, verbose_name='Order Status')),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('authorized', 'Authorized'), ('paid', 'Paid'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('cancelled', 'Cancelled')], db_index=True, default='pending', help_text='Current payment status', max_length=20, verbose_name='Payment Status')),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('paypal', 'PayPal'), ('bank_transfer', 'Bank Transfer'), ('cash_on_delivery', 'Cash on Delivery'), ('digital_wallet', 'Digital Wallet'), ('cryptocurrency', 'Cryptocurrency')], help_text='Method used for payment', max_length=20, verbose_name='Payment Method')),
                ('payment_reference', models.CharField(blank=True, help_text='External payment reference or transaction ID', max_length=255, null=True, verbose_name='Payment Reference')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Order subtotal before tax and shipping', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Tax Amount')),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Shipping and handling cost', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Shipping Cost')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Discount Amount')),
                ('total_amount', models.DecimalField(db_index=True, decimal_places=2, default=Decimal('0.00'), help_text='Final order total', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Total Amount')),
                ('shipping_method', models.CharField(choices=[('standard', 'Standard Shipping'), ('express', 'Express Shipping'), ('overnight', 'Overnight Shipping'), ('pickup', 'Store Pickup'), ('international', 'International Shipping')], default='standard', help_text='Selected shipping method', max_length=20, verbose_name='Shipping Method')),
                ('tracking_number', models.CharField(blank=True, db_index=True, help_text='Shipping carrier tracking number', max_length=100, null=True, verbose_name='Tracking Number')),
                ('estimated_delivery', models.DateTimeField(blank=True, help_text='Estimated delivery date', null=True, verbose_name='Estimated Delivery')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this order', verbose_name='Order Notes')),
                ('special_instructions', models.TextField(blank=True, help_text='Special delivery or handling instructions', verbose_name='Special Instructions')),
                ('currency', models.CharField(default='USD', help_text='Order currency code', max_length=3, verbose_name='Currency')),
                ('language', models.CharField(default='en', help_text='Order language code', max_length=10, verbose_name='Language')),
                ('extra_data', models.JSONField(blank=True, default=dict, help_text='Additional order metadata', verbose_name='Extra Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the order was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the order was last updated', verbose_name='Updated At')),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='Timestamp when the order was confirmed', null=True, verbose_name='Confirmed At')),
                ('shipped_at', models.DateTimeField(blank=True, help_text='Timestamp when the order was shipped', null=True, verbose_name='Shipped At')),
                ('delivered_at', models.DateTimeField(blank=True, help_text='Timestamp when the order was delivered', null=True, verbose_name='Delivered At')),
                ('cancelled_at', models.DateTimeField(blank=True, help_text='Timestamp when the order was cancelled', null=True, verbose_name='Cancelled At')),
                ('billing_address', models.ForeignKey(blank=True, help_text='Billing address (if different from shipping)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_orders', to='address.shippingaddress', verbose_name='Billing Address')),
                ('created_by', models.ForeignKey(blank=True, default=None, help_text='User who created this order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_orders', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('shipping_address', models.ForeignKey(help_text='Delivery address for this order', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='address.shippingaddress', verbose_name='Shipping Address')),
                ('store', models.ForeignKey(help_text='The store where this order was placed', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='store.store', verbose_name='Store')),
                ('updated_by', models.ForeignKey(blank=True, default=None, help_text='User who last updated this order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_orders', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('user', models.ForeignKey(help_text='The customer who placed this order', on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='Customer')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-created_at'],
                'permissions': [('view_all_orders', 'Can view all orders'), ('manage_orders', 'Can manage orders'), ('cancel_orders', 'Can cancel orders'), ('refund_orders', 'Can refund orders')],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the order item', primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Number of items ordered', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of order', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Unit Price')),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for this item (quantity × unit price)', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Total Price')),
                ('original_price', models.DecimalField(decimal_places=2, help_text='Original price before any discounts', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Original Price')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount amount applied to this item', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Discount Amount')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage applied to this item', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='Discount Percentage')),
                ('was_on_sale', models.BooleanField(default=False, help_text='Whether this item was on sale when ordered', verbose_name='Was On Sale')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this item', verbose_name='Item Notes')),
                ('extra_data', models.JSONField(blank=True, default=dict, help_text='Additional item metadata', verbose_name='Extra Data')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the order item was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the order item was last updated', verbose_name='Updated At')),
                ('order', models.ForeignKey(help_text='The order this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='order.order', verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ['created_at'],
            },
        ),
    ]
